Question.cs
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace quick_survey.Models
{
    public class Question
    {
        public int Id { get; set; }
        public string QuestionText { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public bool Active { get; set; }
        public bool ShowResults { get; set; }
        public bool OneVoteOnly { get; set; }
        public int ZoneId { get; set; }
        public List<Answer> Answers { get; set; }

        //input question id
        // sets question live field to 0
        public void DeleteQuestion(int qId)
        {
            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_delete_question", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@request_id", SqlDbType.Int).Value = qId;

                    // execute stored procedure
                    sqlConn.Open();
                    command.ExecuteReader();
                }
            }
        }

        //input none
        //output all active questions
        public List<Question> GetActiveQuestions()
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_active", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            q.ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input none
        //output all active questions
        public List<Question> GetInActiveQuestions()
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_inactive", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            q.ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input start and end date
        //output all questions that fall within that range
        public List<Question> GetQuestionsbyDateRange(DateTime start, DateTime end)
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_requests_date_range", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // add parameters
                    command.Parameters.Add("@start_date", SqlDbType.DateTime).Value = start;
                    command.Parameters.Add("@end_date", SqlDbType.DateTime).Value = end;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            q.ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input zone id
        //output all active questions that fall within that zone
        public List<Question> GetQuestionsbyZone(int zId)
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("q_quicksurvey_questions_get_current_surveys", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // add parameters
                    command.Parameters.Add("@zone_id", SqlDbType.Int).Value = zId;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input start and end date
        //output all questions that fall within that range
        public List<Question> GetQuestionsbyQuestionText(string qText)
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_search_captions", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // add parameters
                    command.Parameters.Add("@caption", SqlDbType.VarChar).Value = qText;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }


        //input Zone ID
        //output List of Archived Questions for that Zone
        public List<Question> GetArchivedQuestions(int zId)
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_report_past10questionresults", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@zone_id", SqlDbType.Int).Value = zId;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            q.ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input Question ID
        // Question details
        public void GetQuestionByQuestionId(int qId)
        {

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_questions_sel", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@question_id", SqlDbType.Int).Value = qId;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        if (rdr.HasRows)
                        {
                            rdr.Read();
                            Id = qId;
                            QuestionText = rdr["question_txt"].ToString();
                            StartDate = Convert.ToDateTime(rdr["question_start"]);
                            EndDate = Convert.ToDateTime(rdr["question_end"]);
                            Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            OneVoteOnly = (Convert.ToInt32(rdr["question_stat_integ"]) == 0 ? false : true);
                            ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            
                            // get answers by Question Id
                            var qAnswers = new Answer();
                            Answers = qAnswers.GetAnswersByQuestionId(qId);
                        }
                    }
                }
            }
        }

        //input none
        // last end date for questions
        public void GetLastQuestionDate()
        {

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_question_date", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        if (rdr.HasRows)
                        {
                            rdr.Read();
                            Id = Convert.ToInt32(rdr["question_id"]);
                            EndDate = Convert.ToDateTime(rdr["question_end"]);
                        }
                    }
                }
            }
        }

        //input none
        //output question id from database
        public void AddQuestion()
        {
            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_questions_add", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@question_txt", SqlDbType.VarChar).Value = QuestionText;
                    command.Parameters.Add("@question_start", SqlDbType.DateTime).Value = StartDate;
                    command.Parameters.Add("@question_end", SqlDbType.DateTime).Value = EndDate;
                    command.Parameters.Add("@question_live", SqlDbType.Int).Value = (Active) ? 1 : 0; 
                    command.Parameters.Add("@question_stat_integ", SqlDbType.Int).Value = 1;
                    command.Parameters.Add("@question_show_results", SqlDbType.Int).Value = (ShowResults) ? 1 : 0;
                    command.Parameters.Add("@zone_id", SqlDbType.Int).Value = ZoneId;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        if (rdr.HasRows)
                        {
                            rdr.Read();
                            Id = Convert.ToInt32(rdr["question_id"]);
                        }
                    }
                }
            }
        }

        //input none
        //output none
        public void UpdateQuestion()
        {
            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_questions_update", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@question_id", SqlDbType.Int).Value = Id;
                    command.Parameters.Add("@question_txt", SqlDbType.VarChar).Value = QuestionText;
                    command.Parameters.Add("@question_start", SqlDbType.DateTime).Value = StartDate;
                    command.Parameters.Add("@question_end", SqlDbType.DateTime).Value = EndDate;
                    command.Parameters.Add("@question_stat_integ", SqlDbType.Int).Value = 1;
                    command.Parameters.Add("@question_show_results", SqlDbType.Int).Value = (ShowResults) ? 1 : 0;
                    command.Parameters.Add("@zone_id", SqlDbType.Int).Value = ZoneId;

                    // execute stored procedure
                    sqlConn.Open();
                    command.ExecuteReader();
                }
            }
        }

    }
}
=====
Question Controller
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;

namespace quick_survey.Models
{
    public class Question
    {
        public int Id { get; set; }
        public string QuestionText { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public bool Active { get; set; }
        public bool ShowResults { get; set; }
        public bool OneVoteOnly { get; set; }
        public int ZoneId { get; set; }
        public List<Answer> Answers { get; set; }

        //input question id
        // sets question live field to 0
        public void DeleteQuestion(int qId)
        {
            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_delete_question", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@request_id", SqlDbType.Int).Value = qId;

                    // execute stored procedure
                    sqlConn.Open();
                    command.ExecuteReader();
                }
            }
        }

        //input none
        //output all active questions
        public List<Question> GetActiveQuestions()
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_active", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            q.ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input none
        //output all active questions
        public List<Question> GetInActiveQuestions()
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_inactive", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            q.ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input start and end date
        //output all questions that fall within that range
        public List<Question> GetQuestionsbyDateRange(DateTime start, DateTime end)
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_requests_date_range", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // add parameters
                    command.Parameters.Add("@start_date", SqlDbType.DateTime).Value = start;
                    command.Parameters.Add("@end_date", SqlDbType.DateTime).Value = end;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            q.ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input zone id
        //output all active questions that fall within that zone
        public List<Question> GetQuestionsbyZone(int zId)
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("q_quicksurvey_questions_get_current_surveys", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // add parameters
                    command.Parameters.Add("@zone_id", SqlDbType.Int).Value = zId;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input start and end date
        //output all questions that fall within that range
        public List<Question> GetQuestionsbyQuestionText(string qText)
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_search_captions", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // add parameters
                    command.Parameters.Add("@caption", SqlDbType.VarChar).Value = qText;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }


        //input Zone ID
        //output List of Archived Questions for that Zone
        public List<Question> GetArchivedQuestions(int zId)
        {
            var questions = new List<Question>();

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_report_past10questionresults", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@zone_id", SqlDbType.Int).Value = zId;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        // loop through record set
                        while (rdr.Read())
                        {
                            Question q = new Question();
                            q.Id = Convert.ToInt32(rdr["question_id"]);
                            q.QuestionText = rdr["question_txt"].ToString();
                            q.StartDate = Convert.ToDateTime(rdr["question_start"]);
                            q.EndDate = Convert.ToDateTime(rdr["question_end"]);
                            q.Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            q.ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            q.ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            questions.Add(q);
                        }
                    }
                }
            }

            return questions;
        }

        //input Question ID
        // Question details
        public void GetQuestionByQuestionId(int qId)
        {

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_questions_sel", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@question_id", SqlDbType.Int).Value = qId;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        if (rdr.HasRows)
                        {
                            rdr.Read();
                            Id = qId;
                            QuestionText = rdr["question_txt"].ToString();
                            StartDate = Convert.ToDateTime(rdr["question_start"]);
                            EndDate = Convert.ToDateTime(rdr["question_end"]);
                            Active = (Convert.ToInt32(rdr["question_live"]) == 0 ? false : true);
                            ShowResults = (Convert.ToInt32(rdr["question_show_results"]) == 0 ? false : true);
                            OneVoteOnly = (Convert.ToInt32(rdr["question_stat_integ"]) == 0 ? false : true);
                            ZoneId = Convert.ToInt32(rdr["zone_id"]);
                            
                            // get answers by Question Id
                            var qAnswers = new Answer();
                            Answers = qAnswers.GetAnswersByQuestionId(qId);
                        }
                    }
                }
            }
        }

        //input none
        // last end date for questions
        public void GetLastQuestionDate()
        {

            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_question_date", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        if (rdr.HasRows)
                        {
                            rdr.Read();
                            Id = Convert.ToInt32(rdr["question_id"]);
                            EndDate = Convert.ToDateTime(rdr["question_end"]);
                        }
                    }
                }
            }
        }

        //input none
        //output question id from database
        public void AddQuestion()
        {
            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_questions_add", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@question_txt", SqlDbType.VarChar).Value = QuestionText;
                    command.Parameters.Add("@question_start", SqlDbType.DateTime).Value = StartDate;
                    command.Parameters.Add("@question_end", SqlDbType.DateTime).Value = EndDate;
                    command.Parameters.Add("@question_live", SqlDbType.Int).Value = (Active) ? 1 : 0; 
                    command.Parameters.Add("@question_stat_integ", SqlDbType.Int).Value = 1;
                    command.Parameters.Add("@question_show_results", SqlDbType.Int).Value = (ShowResults) ? 1 : 0;
                    command.Parameters.Add("@zone_id", SqlDbType.Int).Value = ZoneId;

                    // execute stored procedure
                    sqlConn.Open();
                    using (SqlDataReader rdr = command.ExecuteReader())
                    {
                        if (rdr.HasRows)
                        {
                            rdr.Read();
                            Id = Convert.ToInt32(rdr["question_id"]);
                        }
                    }
                }
            }
        }

        //input none
        //output none
        public void UpdateQuestion()
        {
            using (var sqlConn = Database.GetConnection())
            {
                using (SqlCommand command = new SqlCommand("quicksurvey_questions_update", sqlConn))
                {
                    command.CommandType = System.Data.CommandType.StoredProcedure;

                    //add parameters
                    command.Parameters.Add("@question_id", SqlDbType.Int).Value = Id;
                    command.Parameters.Add("@question_txt", SqlDbType.VarChar).Value = QuestionText;
                    command.Parameters.Add("@question_start", SqlDbType.DateTime).Value = StartDate;
                    command.Parameters.Add("@question_end", SqlDbType.DateTime).Value = EndDate;
                    command.Parameters.Add("@question_stat_integ", SqlDbType.Int).Value = 1;
                    command.Parameters.Add("@question_show_results", SqlDbType.Int).Value = (ShowResults) ? 1 : 0;
                    command.Parameters.Add("@zone_id", SqlDbType.Int).Value = ZoneId;

                    // execute stored procedure
                    sqlConn.Open();
                    command.ExecuteReader();
                }
            }
        }

    }=======

